  const btn = evt.target.closest('#mnAbrirBtn');
  if (!btn) return;
  evt.preventDefault();
  try {
    const stampEl = document.getElementById('agendarMNStamp');
    const mnstamp = stampEl && stampEl.value;
    if (!mnstamp) return;
    window.location.href = `/generic/form/MN/${encodeURIComponent(mnstamp)}?return_to=/monitor`;
  } catch (_) {}
});

// Confirmação ao marcar tarefa como tratada (popup de tarefas)
// Usa captura para interceptar antes do handler existente
document.addEventListener('click', function(e) {
  const btn = e.target.closest('#btnTratar');
  if (!btn) return;
  const ok = window.confirm('Queres marcar a tarefa como tratada?');
  if (!ok) {
    e.preventDefault();
    e.stopImmediatePropagation();
  }
}, true);

// =========================
// Filtro: Apenas as minhas tarefas (setup imediato)
// =========================
(function setupOnlyMineFilter() {
  const chk = document.getElementById('onlyMineChk');
  if (!chk) return;

  const storageKey = 'monitor_only_mine';
  try {
    const stored = localStorage.getItem(storageKey);
    chk.checked = stored === null ? true : stored === '1';
  } catch (_) { chk.checked = true; }

  chk.addEventListener('change', () => {
    try { localStorage.setItem(storageKey, chk.checked ? '1' : '0'); } catch (_) {}
    reloadTasksFilteredImmediate();
  });

  reloadTasksFilteredImmediate();

  function getOnlyMine() { return !!chk.checked; }

  function shouldShowTask(t) {
    const currentUser = (typeof window !== 'undefined' && window.CURRENT_USER) ? window.CURRENT_USER : '';
    const isMnAdmin = (typeof window !== 'undefined' && window.IS_MN_ADMIN) ? !!window.IS_MN_ADMIN : false;
    const isLpAdmin = (typeof window !== 'undefined' && window.IS_LP_ADMIN) ? !!window.IS_LP_ADMIN : false;
    if (getOnlyMine()) return (t.UTILIZADOR || '').toUpperCase() === (currentUser || '').toUpperCase();
    const origins = [];
    if (isMnAdmin) origins.push('MN');
    if (isLpAdmin) { origins.push('LP'); origins.push('FS'); }
    if (origins.length === 0) return (t.UTILIZADOR || '').toUpperCase() === (currentUser || '').toUpperCase();
    return origins.includes((t.ORIGEM || '').toUpperCase());
  }

  async function reloadTasksFilteredImmediate() {
    try {
      const onlyMine = !!chk.checked;
      const res = await fetch(`/generic/api/monitor_tasks_filtered?only_mine=${onlyMine ? '1' : '0'}`);
      const data = await res.json();
      window.MONITOR_TAREFAS_DATA = Array.isArray(data) ? data : (data.rows || []);
      renderTasksFilteredImmediate(window.MONITOR_TAREFAS_DATA);
    } catch (err) {
      console.error('Erro a recarregar tarefas (filtro):', err);
    }
  }

  function renderTasksFilteredImmediate(data) {
    const colAtrasadas = document.getElementById('tarefas-atrasadas');
    const colHoje = document.getElementById('tarefas-hoje');
    const colFuturas = document.getElementById('tarefas-futuras');
    const colTratadas = document.getElementById('tarefas-tratadas');
    if (!colAtrasadas || !colHoje || !colFuturas || !colTratadas) return;

    colAtrasadas.innerHTML = '';
    colHoje.innerHTML = '';
    colFuturas.innerHTML = '';
    colTratadas.innerHTML = '';

    const hoje = new Date();
    const hojeStr = hoje.toISOString().slice(0, 10);

    (data || []).filter(shouldShowTask).forEach(t => {
      const dataFormatada = new Date(t.DATA + 'T' + t.HORA);
      const hhmm = t.HORA;
      const ddmm = dataFormatada.toLocaleDateString('pt-PT');
      // Título do card: se não tiver origem e nem alojamento, mostrar "Tarefa"
      const _semOrigem = !t.ORIGEM || String(t.ORIGEM).trim() === '';
      const _semAloj = !t.ALOJAMENTO || String(t.ALOJAMENTO).trim() === '';
      const _tituloCard = (_semOrigem && _semAloj) ? 'Tarefa' : (t.ALOJAMENTO || '');

      const bloco = document.createElement('div');
      bloco.className = 'card tarefa-card mb-2 shadow-sm';

      let texto;
      if (t.DATA === hojeStr) {
        texto = `<strong class=\"tarefa-alojamento\">${_tituloCard}</strong><br><span class='text-muted small'>${hhmm} - ${t.TAREFA}</span>`;
      } else {
        texto = `<strong class=\"tarefa-alojamento\">${_tituloCard}</strong><br><span class='text-muted small'>${ddmm} ${hhmm} - ${t.TAREFA}</span>`;
      }

      let icone = '';
      if (t.TRATADO) {
        icone = '<i class="fas fa-check-circle text-success float-end"></i>';
      } else if (t.DATA < hojeStr) {
        icone = '<i class="fas fa-exclamation-circle text-danger float-end"></i>';
      }

      // Badge do utilizador (nome) com cor
      const esc = (typeof window !== 'undefined' && typeof window.escapeHtml === 'function')
        ? window.escapeHtml
        : (s => String(s ?? '').replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[ch])));
      const userName = t.UTILIZADOR_NOME || t.UTILIZADOR || '';
      const userColor = t.UTILIZADOR_COR || '#6c757d';
      const userBadge = userName
        ? `<span class="user-badge float-end ms-1" title="${esc(userName)}" style="background-color:${esc(userColor)};color:#fff;border-radius:8px;padding:2px 6px;font-size:.70rem;line-height:1.1;white-space:nowrap;">${esc(userName)}</span>`
        : '';

      let origemIcon = '';
      switch ((t.ORIGEM || '').toUpperCase()) {
        case 'MN': origemIcon = '<i class="fa-solid fa-wrench text-dark float-end ms-1" title="Manutenção"></i>'; break;
        case 'LP': origemIcon = '<i class="fa-solid fa-broom text-dark float-end ms-1" title="Limpeza"></i>'; break;
        case 'FS': origemIcon = '<i class="fa-solid fa-cart-shopping text-dark float-end ms-1" title="Falta de Stock"></i>'; break;
        default:
          if (!t.ORIGEM || String(t.ORIGEM).trim() === '') {
            origemIcon = '<i class="fa-solid fa-list-check text-dark float-end ms-1" title="Tarefa"></i>';
          }
          break;
      }

        bloco.innerHTML = `<div class=\"card-body p-2\">${userBadge}${origemIcon}${icone}<div>${texto}</div></div>`;

      bloco.addEventListener('click', () => {
        const modalElement = document.getElementById('tarefaModal');
        const modal = modalElement ? new bootstrap.Modal(modalElement) : null;
        const tarefaDescricao = document.getElementById('tarefaDescricao');
        const btnTratar = document.getElementById('btnTratar');
        const btnReabrir = document.getElementById('btnReabrir');

        window.tarefaSelecionada = t;
        if (tarefaDescricao) tarefaDescricao.textContent = `${t.TAREFA} (${t.HORA} - ${t.ALOJAMENTO})`;

        fetch(`/api/tarefa_info/${t.TAREFASSTAMP}`)
          .then(res => res.json())
          .then(info => {
            const extraInfo = info.info || '';
            if (tarefaDescricao) tarefaDescricao.innerHTML = `<strong>${t.TAREFA} (${t.HORA} - ${t.ALOJAMENTO})</strong><br><br>${extraInfo.replace(/\n/g, '<br>')}`;
          })
          .catch(err => console.error('Erro ao buscar info da tarefa', err));

        if (btnTratar) btnTratar.style.display = 'none';
        if (btnReabrir) btnReabrir.style.display = 'none';
        if (!t.TRATADO) { if (btnTratar) btnTratar.style.display = 'inline-block'; }
        else { if (btnReabrir) btnReabrir.style.display = 'inline-block'; }

        // Botão Abrir (no modal) – por origem/permissões
        try {
          const btnAbrir = document.getElementById('btnAbrirTarefa');
          if (btnAbrir) {
            const oiM = getOpenInfo(t);
            if (oiM.can) {
              btnAbrir.style.display = 'inline-block';
              btnAbrir.onclick = () => { window.location.href = oiM.url; };
            } else {
              btnAbrir.style.display = 'none';
              btnAbrir.onclick = null;
            }
          }
        } catch(_){}
        if (modal) modal.show();
      });

      if (!t.TRATADO) {
        if (t.DATA < hojeStr) colAtrasadas.appendChild(bloco);
        else if (t.DATA === hojeStr) colHoje.appendChild(bloco);
        else colFuturas.appendChild(bloco);
      } else {
        colTratadas.appendChild(bloco);
      }
    });
  }
})();

// Força o estado por defeito com visto e recarrega
document.addEventListener('DOMContentLoaded', () => {
  const chk = document.getElementById('onlyMineChk');
  if (chk) {
    chk.checked = true;
    try { localStorage.setItem('monitor_only_mine','1'); } catch(_){}
    // dispara mudança para garantir render
    try { chk.dispatchEvent(new Event('change')); } catch(_){}
  }
});

// =========================
// Filtro: Apenas as minhas tarefas
// =========================
(function() {
  const onlyMineKey = 'monitor_only_mine';

  function getOnlyMine() {
    const chk = document.getElementById('onlyMineChk');
    if (chk) return !!chk.checked;
    try {
      const stored = localStorage.getItem(onlyMineKey);
      return stored === null ? true : stored === '1';
    } catch (_) { return true; }
  }

  function setOnlyMine(val) {
    try { localStorage.setItem(onlyMineKey, val ? '1' : '0'); } catch (_) {}
  }

  function shouldShowTask(t, onlyMine) {
    const currentUser = (typeof window !== 'undefined' && window.CURRENT_USER) ? window.CURRENT_USER : '';
    const isMnAdmin = (typeof window !== 'undefined' && window.IS_MN_ADMIN) ? !!window.IS_MN_ADMIN : false;
    const isLpAdmin = (typeof window !== 'undefined' && window.IS_LP_ADMIN) ? !!window.IS_LP_ADMIN : false;
    if (onlyMine) return (t.UTILIZADOR || '').toUpperCase() === (currentUser || '').toUpperCase();
    const origins = [];
    if (isMnAdmin) origins.push('MN');
    if (isLpAdmin) { origins.push('LP'); origins.push('FS'); }
    if (origins.length === 0) return (t.UTILIZADOR || '').toUpperCase() === (currentUser || '').toUpperCase();
    return origins.includes((t.ORIGEM || '').toUpperCase());
  }

  function renderTasksFiltered(data) {
    const colAtrasadas = document.getElementById('tarefas-atrasadas');
    const colHoje = document.getElementById('tarefas-hoje');
    const colFuturas = document.getElementById('tarefas-futuras');
    const colTratadas = document.getElementById('tarefas-tratadas');
    if (!colAtrasadas || !colHoje || !colFuturas || !colTratadas) return;

    colAtrasadas.innerHTML = '';
    colHoje.innerHTML = '';
    colFuturas.innerHTML = '';
    colTratadas.innerHTML = '';

    const hoje = new Date();
    const hojeStr = hoje.toISOString().slice(0, 10);
    const onlyMine = getOnlyMine();

    (data || []).filter(t => shouldShowTask(t, onlyMine)).forEach(t => {
      const dataFormatada = new Date(t.DATA + 'T' + t.HORA);
      const hhmm = t.HORA;
      const ddmm = dataFormatada.toLocaleDateString('pt-PT');
      // Título do card: se não tiver origem e nem alojamento, mostrar "Tarefa"
      const _semOrigem = !t.ORIGEM || String(t.ORIGEM).trim() === '';
      const _semAloj = !t.ALOJAMENTO || String(t.ALOJAMENTO).trim() === '';
      const _tituloCard = (_semOrigem && _semAloj) ? 'Tarefa' : (t.ALOJAMENTO || '');

      const bloco = document.createElement('div');
      bloco.className = 'card tarefa-card mb-2 shadow-sm';

      let texto;
      if (t.DATA === hojeStr) {
        texto = `<strong class=\"tarefa-alojamento\">${_tituloCard}</strong><br><span class='text-muted small'>${hhmm} - ${t.TAREFA}</span>`;
      } else {
        texto = `<strong class=\"tarefa-alojamento\">${_tituloCard}</strong><br><span class='text-muted small'>${ddmm} ${hhmm} - ${t.TAREFA}</span>`;
      }

      let icone = '';
      if (t.TRATADO) {
        icone = '<i class="fas fa-check-circle text-success float-end"></i>';
      } else if (t.DATA < hojeStr) {
        icone = '<i class="fas fa-exclamation-circle text-danger float-end"></i>';
      }

      // Badge do utilizador
      const esc = (typeof window !== 'undefined' && typeof window.escapeHtml === 'function')
        ? window.escapeHtml
        : (s => String(s ?? '').replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[ch])));
      const userName = t.UTILIZADOR_NOME || t.UTILIZADOR || '';
      const userColor = t.UTILIZADOR_COR || '#6c757d';
      const userBadge = userName
        ? `<span class=\"user-badge float-end ms-1\" title=\"${esc(userName)}\" style=\"background-color:${esc(userColor)};color:#fff;border-radius:8px;padding:2px 6px;font-size:.70rem;line-height:1.1;white-space:nowrap;\">${esc(userName)}</span>`
        : '';

      let origemIcon = '';
      switch ((t.ORIGEM || '').toUpperCase()) {
        case 'MN': origemIcon = '<i class="fa-solid fa-wrench text-dark float-end ms-1" title="Manutenção"></i>'; break;
        case 'LP': origemIcon = '<i class="fa-solid fa-broom text-dark float-end ms-1" title="Limpeza"></i>'; break;
        case 'FS': origemIcon = '<i class="fa-solid fa-cart-shopping text-dark float-end ms-1" title="Falta de Stock"></i>'; break;
        default:
          if (!t.ORIGEM || String(t.ORIGEM).trim() === '') {
            origemIcon = '<i class="fa-solid fa-list-check text-dark float-end ms-1" title="Tarefa"></i>';
          }
          break;
      }

      bloco.innerHTML = `<div class=\"card-body p-2\">${userBadge}${origemIcon}${icone}<div>${texto}</div></div>`;

      bloco.addEventListener('click', () => {
        const modalElement = document.getElementById('tarefaModal');
        const modal = modalElement ? new bootstrap.Modal(modalElement) : null;
        const tarefaDescricao = document.getElementById('tarefaDescricao');
        const btnTratar = document.getElementById('btnTratar');
        const btnReabrir = document.getElementById('btnReabrir');
        
        tarefaSelecionada = t;
        if (tarefaDescricao) tarefaDescricao.textContent = `${t.TAREFA} (${t.HORA} - ${t.ALOJAMENTO})`;

        fetch(`/api/tarefa_info/${t.TAREFASSTAMP}`)
          .then(res => res.json())
          .then(data => {
            const extraInfo = data.info || '';
            if (tarefaDescricao) tarefaDescricao.innerHTML = `<strong>${t.TAREFA} (${t.HORA} - ${t.ALOJAMENTO})</strong><br><br>${extraInfo.replace(/\n/g, '<br>')}`;
          })
          .catch(err => console.error('Erro ao buscar info da tarefa', err));

        if (btnTratar) btnTratar.style.display = 'none';
        if (btnReabrir) btnReabrir.style.display = 'none';
        if (!t.TRATADO) { if (btnTratar) btnTratar.style.display = 'inline-block'; } else { if (btnReabrir) btnReabrir.style.display = 'inline-block'; }
        if (modal) modal.show();
      });

      if (!t.TRATADO) {
        if (t.DATA < hojeStr) colAtrasadas.appendChild(bloco);
        else if (t.DATA === hojeStr) colHoje.appendChild(bloco);
        else colFuturas.appendChild(bloco);
      } else {
        colTratadas.appendChild(bloco);
      }
    });
  }

  async function reloadTasksFiltered() {
    try {
      const res = await fetch('/generic/api/monitor_tasks');
      const data = await res.json();
      window.MONITOR_TAREFAS_DATA = Array.isArray(data) ? data : (data.rows || []);
      renderTasksFiltered(window.MONITOR_TAREFAS_DATA);
    } catch (err) {
      console.error(err);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const chk = document.getElementById('onlyMineChk');
    if (chk) {
      // default checked
      try {
        const stored = localStorage.getItem(onlyMineKey);
        chk.checked = stored === null ? true : stored === '1';
      } catch (_) { chk.checked = true; }
      chk.addEventListener('change', () => {
        setOnlyMine(chk.checked);
        if (window.MONITOR_TAREFAS_DATA) renderTasksFiltered(window.MONITOR_TAREFAS_DATA);
        else reloadTasksFiltered();
      });
    }
    // ensure initial render uses our filter logic
    reloadTasksFiltered();
  });
})();

// Novo renderer: cards de MN semelhantes aos das tarefas
function renderMNCardStyled(mn) {
  // Espera { MNSTAMP, NOME (quem pediu), ALOJAMENTO, INCIDENCIA, DATA (YYYY-MM-DD) }
  const card = document.createElement('div');
  card.className = 'card tarefa-card mb-2 shadow-sm tarefa-manutencao';
  card.style.cursor = 'pointer';

  const aloj = mn.ALOJAMENTO || '';
  const quem = mn.NOME || mn.UTILIZADOR || '';
  const dataStr = mn.DATA ? new Date(mn.DATA).toLocaleDateString('pt-PT') : '';
  const incid = mn.INCIDENCIA || mn.DESCRICAO || '';

  card.innerHTML = `
    <div class="card-body p-2">
      <div class="tarefa-titulo"><strong>${escapeHtml(aloj)}</strong></div>
      <div class="tarefa-subtitulo text-muted small">${escapeHtml(quem)}${(quem && dataStr) ? ' • ' : ''}${escapeHtml(dataStr)}</div>
      <div class="tarefa-texto small">${escapeHtml(incid)}</div>
    </div>
  `;

  card.addEventListener('click', () => {
    const mnstamp = mn.MNSTAMP || mn.MNSTAMP || mn.mnstamp || '';
    const modalEl = document.getElementById('agendarModal');
